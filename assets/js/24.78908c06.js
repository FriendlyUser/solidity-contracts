(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{169:function(t,n,a){"use strict";a.r(n);var s=a(0),e=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"content"},[a("h2",{attrs:{id:"solidity-notes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#solidity-notes","aria-hidden":"true"}},[t._v("#")]),t._v(" Solidity Notes")]),t._v(" "),a("p",[t._v("Solidity receives many comparisons to JavaScript, but its closest\nrelative is C. Solidity is a strongly typed language with minimal\nfunctionality that emphasizes limiting storage and CPU usage. It supports\n256-bit data types for the EVM, unlike most languages, which support only\n32- and 64-bit processors.")]),t._v(" "),a("p",[t._v("In general, Solidity development should be treated more like building\na bridge than building a web site. The process is not iterative.")]),t._v(" "),a("p",[t._v("Whenever possible, proven legacy code should be used instead of new,\nuntested code. Contracts should be thoroughly tested and vetted before\nbeing deployed to the mainnet.")]),t._v(" "),a("div",{staticClass:"language-solidity extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('pragma solidity ^0.4.15;\ncontract HelloWorld {\n address owner;\n string greeting = "Hello World";\n // Constructor function\n function HelloWorld () public {\n owner = msg.sender;\n }\n function greet () constant public returns (string) {\n return greeting; \n }\n function kill () public {\n require(owner == msg.sender);\n selfdestruct(owner);\n }\n}\n')])])]),a("p",[t._v("Visibility modifiers determine the contexts in which a function can be\nexecuted. There are four visibility modifiers in Solidity:")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("private")]),t._v(": Only the current contract can use the function.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("internal")]),t._v(": Only the current contract and contracts inheriting\nfrom the current contract can execute the function.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("external")]),t._v(": The function can be triggered only by a transaction or\nexternal contract.")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("public")]),t._v(": There are no restrictions on how the function can be\ncalled.")])])]),t._v(" "),a("p",[t._v("Only some functions are permitted to modify the state tree. Functions\ndeclared with one of the following three modifiers cannot modify state\nor send ether:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("view: Can read information from the state tree but cannot modify\nstate.")])]),t._v(" "),a("li",[a("p",[t._v("pure: Cannot read or modify the state tree. Th return value depends\non only the function arguments.")])]),t._v(" "),a("li",[a("p",[t._v("constant: An alias for view. Deprecated to prevent confusion with\nconstant variables.")])])]),t._v(" "),a("p",[t._v("The modifier payable is special, allowing functions to accept ether.")]),t._v(" "),a("h5",{attrs:{id:"fallback-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fallback-functions","aria-hidden":"true"}},[t._v("#")]),t._v(" Fallback Functions")]),t._v(" "),a("p",[t._v("Every contract can have one unnamed function that acts as a default\nfunction to execute when no other functions can match the transaction\ncall or when a transaction is sent to a contract without specifying a\nfunction.")]),t._v(" "),a("p",[t._v("The type mapping is Solidity’s version of a hashmap. It’s a key/value\nstore in which both the key and the value must adhere to the specified\ndata type. The value can be any data type, whereas the key type is\nrestricted to address, bool, the integer types, fixed-size arrays, and\nthe fixed-size byte types.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",{staticStyle:{"text-align":"center"}})])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Data Types")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Zero Value")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Integers Values")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("bool")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("address")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("0x0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Bytes types")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("0")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Array")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("[](length=0)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("mapping")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("no keys")])])])]),t._v(" "),a("p",[t._v("Variables set or initialized to the zero value in Solidity are not\nincluded in the state tree. The delete keyword in Solidity resets a\nvariable to its zero value and deletes the variable from the state tree.")]),t._v(" "),a("p",[t._v("Solidity stores locations in two places: in the state tree and in\nmemory. Storage in the state tree persists on the blockchain, whereas\nthe memory is cleared after every transaction. Storage on the state tree\nis expensive and should be used only when necessary. Memory is cheap and\nshould be used whenever possible. Solidity refers to these two locations\nas storage for the state tree and memory for memory.")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("    uint a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// addition")]),t._v("\n    a "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// shorthand for a = a + 3")]),t._v("\n    a"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// shorthand for a += 1")]),t._v("\n    "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// subtraction")]),t._v("\n    a "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// shorthand for a = a -1")]),t._v("\n    a"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// shorthand for a -= 1")]),t._v("\n    "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// multiplication")]),t._v("\n    a "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// shorthand for a = a * 3")]),t._v("\n    "),a("span",{attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// integer division")]),t._v("\n    "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// = 1, no floating point arithmetic")]),t._v("\n    a "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// shorthand for a = a / 2;")]),t._v("\n    "),a("span",{attrs:{class:"token number"}},[t._v("10")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// modulus")]),t._v("\n    "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// power operator, this is 23")]),t._v("\n    "),a("span",{attrs:{class:"token number"}},[t._v("2e7")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// scientific notation, this is 2 * 107")]),t._v("\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("uint a "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nuint b "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// multiply by 10**n to add n zeros")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// if you add n zeros, the last n digits will")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// be the decimal digits")]),t._v("\nuint c "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),a("span",{attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token number"}},[t._v("6")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" b"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 3333333")]),t._v("\n")])])]),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" wei"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" ether "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("10")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token number"}},[t._v("18")]),t._v(" wei"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" ether "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2e18")]),t._v(" wei"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v(" finney "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v(".002")]),t._v(" ether"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" ether"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("buyLottoTicket")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nmsg"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 1000000000000000000 a.k.a. 1 ether")]),t._v("\n")])])]),a("p",[t._v("Improper use of the ether transfer functions are the number one source of\nSolidity bugs and hacks. There are three ways to send ether in Solidity:")]),t._v(" "),a("ul",[a("li",[t._v("address.transfer(value)")]),t._v(" "),a("li",[t._v("address.send(value)")]),t._v(" "),a("li",[t._v("address.call.value(value)()")])]),t._v(" "),a("div",{staticClass:"language-solidity extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("// DO NOT USE: BAD CODE\ncontract TrustFund {\n address[3] children;\n function TrustFund (address[3] _children) {\n children = _children;\n }\n function updateAddress(uint child, address newAddress)\n {\n require(msg.sender == children[child]);\n children[child] = newAddress;\n }\n function disperse () {\n uint balance = address(this).balance;\n children[0].transfer(balance / 2);\n children[1].transfer(balance / 4);\n children[2].transfer(balance / 4);\n }\n function () payable {}\n}\n")])])]),a("p",[t._v("If I’m the second child and I’m upset that I’m not receiving my fair\nshare, I can lock up the contract so that no one can access their funds by\nupdating my address to an empty contract with no fallback function:\ncontract SaltyChild {}")]),t._v(" "),a("p",[t._v("Safely Dispersing Ether to a Fixed Number of Addresses")]),t._v(" "),a("div",{staticClass:"language-solidity extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("function disperse () {\n uint balance = address(this).balance;\n children[0].send(balance / 2);\n children[1].send(balance / 4);\n children[2].send(balance / 4);\n}\n")])])]),a("p",[t._v("Race condition is the general term for the class of bugs that can occur when\ncalling external contracts. A race condition can occur when any unknown\nstate change occurs in an external function call. A re-entrancy attack is one\nform of race condition. Another form of race condition can occur if two\ncontracts are both modifying the same variable in a third contract.")])])}],!1,null,null,null);n.default=e.exports}}]);